Lecture 2 on Buffer overflow exploit

Link to lecture: https://www.ittc.ku.edu/~alexbardas/sec/materials/slides/getscore-tmp.pdf
Segmentation Fault:occurs when user tries to access(read or write) an illegal memory locationor references a variable or program instruction in a location where it does not reside (such as referencing a program instr that normally resides in the text segment in the data segment instead, which is actually the place for automatic /static or global variables for the program. Read more about segfaults here : https://kb.iu.edu/d/aqsj
core dump: picture of Process Control block saved to disk when a program crashes. Process Control Block is a data structure in the OS kernel that contains information about managing a process. "Manifestation of a process in the OS". Read more:
https://en.wikipedia.org/wiki/Process_control_block



The getscore program:

User can execute getscore with root privileges.
Step 1: Bruteforce the SSN. Counter measure: Error log maintained by the owner. No RUID tracking in place. But owner can program to kill execution after a number of attemptsto thwart brute-forcing.
Step 2: The attacker tries to get the core dump (snapshot of PCB) so he can learn more about the program.
No core dump file in the directory is generated with segfault in this case. What now? Run a debugger on the executable?? Remember that ptrace command etc in debugger cannot be run on an setuid program. So, we would prefer to run it on the core dump.
Step 3: Student can cd /root/and execute ./getscore with different inputs untilhe/she gets segfault. Then, copy the executable to your own environment and run it. cp getscore ~/
NOTE: Once the attacker copies this file to his/her own environment, the setuid bit is not set anymore. But since he is owner of file now,he can set the setuid bit with chmod 4755 getscore command. Run it with: ./getscore 'name' 'SSN'
You get the message that it needs a score file as input! Create one in vim using vim score.txt. Quit with :wq to save changes
Now, try running the command again ./getscore a b
You will get, invalid username or SSN.
Step 4: The attacker needs an elegant way to create a long input. Possible methods: write a script.It csan also be done with bash/shell. But we will use perl because it comes with RedHat.
Step 5: When the program is executed again with this command: ./getscore a b
we get the error message, "invalid username or SSN" (which means there is hope for the attacker :) )
Step 6:Use perl scripting language to save long input in $EGG variable which is used in place of SSN to deliberately cause an overflow. $EGG='perl -e "print 'A'x200"' (NOTE: NO SPACES BETWEEN ENV VAR NAME,= AND `)
SEGMENTATION FAULT (CORE DUMPED)
The core file can now be examined with gdb gdb --core core.1011 (or whatever the core extension is in the file, ls to find out)
Gives Signal 11 error (illegal memory access) at 0x41414141 which is 4'A in hex that we flooded the buffer with.






